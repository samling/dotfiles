#!/usr/bin/env bash

# Get OS information
{{- $osName := .chezmoi.osRelease.prettyName -}}
{{- $osID := $osName | lower | replace " " "_" -}}

# Helper function to install packages via pacman
install_pacman_packages() {
    local packages="$1"
    local category="$2"
    
    if [ -n "$packages" ]; then
        echo "Installing $category packages with pacman..."
        sudo pacman -S --needed --noconfirm $packages
        echo "Finished installing $category packages"
    else
        echo "No $category packages to install for this OS"
    fi
}

# Helper function to install packages via yay (AUR)
install_aur_packages() {
    local packages="$1"
    
    if [ -n "$packages" ]; then
        # Check if yay is installed
        if ! command -v yay &> /dev/null; then
            echo "yay is not installed. Skipping AUR package installation."
            return
        fi
        
        echo "Installing AUR packages..."
        yay -S --needed --noconfirm $packages
        echo "Finished installing AUR packages"
    else
        echo "No AUR packages to install for this OS"
    fi
}

# Only proceed with Arch Linux
{{- if eq $osID "arch_linux" }}

# Base packages
{{- $basePackages := "" }}
{{- range $packageName, $packageData := .packages.base -}}
{{- if and ($packageData) (index $packageData $osID) (index $packageData $osID "name") -}}
{{- $basePackages = printf "%s %s" $basePackages (index $packageData $osID "name") -}}
{{- end }}
{{- end }}
install_pacman_packages "{{ $basePackages | trim }}" "base"

# Tools packages
{{- $toolsPackages := "" }}
{{- range $packageName, $packageData := .packages.tools -}}
{{- if and ($packageData) (index $packageData $osID) (index $packageData $osID "name") -}}
{{- $toolsPackages = printf "%s %s" $toolsPackages (index $packageData $osID "name") -}}
{{- end }}
{{- end }}
install_pacman_packages "{{ $toolsPackages | trim }}" "tools"

# Hyprland packages
{{- $hyprlandPackages := "" }}
{{- range $packageName, $packageData := .packages.hyprland -}}
{{- if and ($packageData) (index $packageData $osID) (index $packageData $osID "name") -}}
{{- $hyprlandPackages = printf "%s %s" $hyprlandPackages (index $packageData $osID "name") -}}
{{- end }}
{{- end }}
{{ if (hasKey . "desktop") }}{{ if eq .desktop.environment "hyprland" }}
install_pacman_packages "{{ $hyprlandPackages | trim }}" "hyprland"
{{ else }}
echo "Skipping Hyprland packages as desktop.environment is not set to 'hyprland'"
{{ end }}{{ else }}
echo "Skipping Hyprland packages as desktop.environment is not configured"
{{ end }}

# Sway packages
{{- $swayPackages := "" }}
{{- range $packageName, $packageData := .packages.sway -}}
{{- if and ($packageData) (index $packageData $osID) (index $packageData $osID "name") -}}
{{- $swayPackages = printf "%s %s" $swayPackages (index $packageData $osID "name") -}}
{{- end }}
{{- end }}
{{ if (hasKey . "desktop") }}{{ if eq .desktop.environment "sway" }}
install_pacman_packages "{{ $swayPackages | trim }}" "sway"
{{ else }}
echo "Skipping Sway packages as desktop.environment is not set to 'sway'"
{{ end }}{{ else }}
echo "Skipping Sway packages as desktop.environment is not configured"
{{ end }}

# AUR packages
{{- $aurPackages := "" }}
{{- range $packageName, $packageData := .packages.aur -}}
{{- if and ($packageData) (index $packageData $osID) (index $packageData $osID "name") -}}
{{- $aurPackages = printf "%s %s" $aurPackages (index $packageData $osID "name") -}}
{{- end }}
{{- end }}
install_aur_packages "{{ $aurPackages | trim }}"
{{- end }} 