#!/usr/bin/env bash
# packages hash: {{ .packages | toJson | sha256sum }}

{{- $osID := .host.os_type -}}

{{- /* Map OS type to package manager */}}
{{- $packageManager := "" -}}
{{- if eq $osID "arch" -}}
  {{- $packageManager = "pacman" -}}
{{- else if eq $osID "darwin" -}}
  {{- $packageManager = "brew" -}}
{{- else if eq $osID "ubuntu" -}}
  {{- $packageManager = "apt" -}}
{{- end -}}

{{- $packageList := "" -}}
{{- $aurPackageList := "" -}}

{{- /* Process Base Packages */}}
{{- range $basePackageName, $basePackageData := .packages.base -}}
  {{- /* Find package name for the current package manager */}}
  {{- if and ($basePackageData) (index $basePackageData $packageManager) -}}
    {{- $packageList = printf "%s %s" $packageList (index $basePackageData $packageManager) -}}
  {{- end -}}
  {{- /* Add Arch AUR packages if applicable */}}
  {{- if and (eq $osID "arch") ($basePackageData) (index $basePackageData "aur") -}}
    {{- $aurPackageList = printf "%s %s" $aurPackageList (index $basePackageData "aur") -}}
  {{- end -}}
{{- end }}

{{- /* Process Laptop Packages if chassis type is laptop */}}
{{- if eq .chezmoi.config.data.chassis.type "laptop" }}
  {{- range $laptopPackageName, $laptopPackageData := .packages.laptop -}}
    {{- /* Find package name for the current package manager */}}
    {{- if and ($laptopPackageData) (index $laptopPackageData $packageManager) -}}
      {{- $packageList = printf "%s %s" $packageList (index $laptopPackageData $packageManager) -}}
    {{- end -}}
    {{- /* Add Arch AUR packages if applicable */}}
    {{- if and (eq $osID "arch") ($laptopPackageData) (index $laptopPackageData "aur") -}}
      {{- $aurPackageList = printf "%s %s" $aurPackageList (index $laptopPackageData "aur") -}}
    {{- end -}}
  {{- end }}
{{- end }}

echo "Processing packages for {{ $osID }}..."

{{- $packageList = $packageList | trim -}}
{{- $aurPackageList = $aurPackageList | trim -}}

{{- if eq $osID "arch" }}
  {{- if $packageList }}
    echo "Installing Arch packages: {{ $packageList }}"
    sudo pacman -S --needed --noconfirm --ask=4 {{ $packageList }}
  {{- else }}
    echo "No Arch packages to install."
  {{- end }}

  {{- if $aurPackageList }}
    echo "Installing AUR packages: {{ $aurPackageList }}"
    # Check if yay is installed
    if ! command -v yay &> /dev/null; then
      echo "yay not found. Attempting to install yay-bin..."
      TEMP_DIR=$(mktemp -d)
      git clone https://aur.archlinux.org/yay-bin.git "$TEMP_DIR"
      (cd "$TEMP_DIR" && makepkg -si --noconfirm)
      rm -rf "$TEMP_DIR"
      if ! command -v yay &> /dev/null; then
        echo "Failed to install yay. Please install an AUR helper manually."
        exit 1
      fi
      echo "yay installed successfully."
    fi
    yay -S --needed --noconfirm --ask=4 {{ $aurPackageList }}
  {{- else }}
    echo "No AUR packages to install."
  {{- end }}

{{- else if eq $osID "darwin" }}
  {{- if .packages.taps.darwin }}
    {{- range $tap := .packages.taps.darwin }}
      echo "Tapping {{ $tap }}"
      brew tap {{ $tap }}
    {{- end }}
  {{- end }}
  {{- if $packageList }}
    echo "Installing Darwin (Homebrew) packages: {{ $packageList }}"
    brew install {{ $packageList }}
  {{- else }}
    echo "No Darwin (Homebrew) packages to install."
  {{- end }}

{{- else if eq $osID "ubuntu" }}
  {{- if $packageList }}
    echo "Installing Ubuntu (APT) packages: {{ $packageList }}"
    sudo apt update
    sudo apt install -y {{ $packageList }}
  {{- else }}
    echo "No Ubuntu (APT) packages to install."
  {{- end }}

{{- else }}
  echo "Unsupported OS ID: {{ $osID }}. Cannot install packages."
{{- end }}

echo "Package processing finished." 
