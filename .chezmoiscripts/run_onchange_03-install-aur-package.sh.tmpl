#!/usr/bin/env bash

{{- $osID := "" -}}
{{- if (hasKey .chezmoi.osRelease "id") -}}
{{-   $osID = .chezmoi.osRelease.id -}}
{{- else if eq .chezmoi.os "darwin" -}}
{{-   $osID = "darwin" -}}
{{- end -}}

{{- $aurPackages := .packages.aur -}}
{{- $packageList := "" -}}

{{- range $aurPackageName, $aurPackageData := .packages.aur -}}
{{- if and ($aurPackageData) (index $aurPackageData $osID) (index $aurPackageData $osID "name") -}}
{{- $packageList = printf "%s %s" $packageList (index $aurPackageData $osID "name") -}}
{{- end -}}
{{- end }}

{{- if eq $osID "arch" }}
echo "Installing AUR packages for {{ $osID }}..."

# Check if yay is installed
if ! command -v yay &> /dev/null; then
    echo "yay not found, installing..."
    git clone https://aur.archlinux.org/yay.git /tmp/yay
    (cd /tmp/yay && makepkg -si --noconfirm)
    rm -rf /tmp/yay
fi

yay -S --needed --noconfirm {{ $packageList | trim }}
{{- else if eq $osID "darwin" }}
echo "Installing additional packages for {{ $osID }}..."
# On macOS, these would typically be installed through homebrew casks or taps
brew install {{ $packageList | trim }}
{{- else if eq $osID "ubuntu" }}
echo "Installing PPA/additional packages for {{ $osID }}..."

# Handle specific Ubuntu packages
for package in {{ $packageList }}; do
    case $package in
        "google-chrome-stable")
            if ! dpkg -l | grep -q google-chrome-stable; then
                echo "Installing Google Chrome..."
                wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O /tmp/google-chrome.deb
                sudo dpkg -i /tmp/google-chrome.deb || sudo apt-get install -f -y
                rm -rf /tmp/google-chrome.deb
            else
                echo "Google Chrome already installed, skipping."
            fi
            ;;
        "gitmux")
            if ! command -v gitmux &> /dev/null; then
                echo "Installing gitmux..."
                LATEST_GITMUX=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/arl/gitmux/releases/latest | jq -r '.assets[] | to_entries[] | select(.key|startswith("browser_download_url")) | select(.value|contains("linux_amd64")).value')
                wget "${LATEST_GITMUX}" -O /tmp/gitmux.tar.gz
                mkdir -p /tmp/gitmux
                tar xzvf /tmp/gitmux.tar.gz -C /tmp/gitmux
                sudo cp -f /tmp/gitmux/gitmux /usr/local/bin/gitmux
                rm -rf /tmp/gitmux.tar.gz /tmp/gitmux
            else
                echo "gitmux already installed, skipping."
            fi
            ;;
        "viddy")
            if ! command -v viddy &> /dev/null; then
                echo "Installing viddy..."
                LATEST_VIDDY=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/sachaos/viddy/releases/latest | jq -r '.assets[] | to_entries[] | select(.key|startswith("browser_download_url")) | select(.value|contains("linux-x86_64.tar.gz")).value')
                wget "${LATEST_VIDDY}" -O /tmp/viddy.tar.gz
                mkdir -p /tmp/viddy
                tar xzvf /tmp/viddy.tar.gz -C /tmp/viddy
                sudo cp -f /tmp/viddy/viddy /usr/local/bin/viddy
                rm -rf /tmp/viddy.tar.gz /tmp/viddy
            else
                echo "viddy already installed, skipping."
            fi
            ;;
        "vendir")
            if ! command -v vendir &> /dev/null; then
                echo "Installing vendir..."
                LATEST_VENDIR=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/carvel-dev/vendir/releases/latest | jq -r '.assets[] | to_entries[] | select(.key|startswith("browser_download_url")) | select(.value|contains("linux-amd64")).value')
                wget "${LATEST_VENDIR}" -O /tmp/vendir
                sudo mv /tmp/vendir /usr/local/bin && chmod +x /usr/local/bin/vendir
            else
                echo "vendir already installed, skipping."
            fi
            ;;
        "ytt")
            if ! command -v ytt &> /dev/null; then
                echo "Installing ytt..."
                LATEST_YTT=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/carvel-dev/ytt/releases/latest | jq -r '.assets[] | to_entries[] | select(.key|startswith("browser_download_url")) | select(.value|contains("linux-amd64")).value')
                wget "${LATEST_YTT}" -O /tmp/ytt
                sudo mv /tmp/ytt /usr/local/bin && chmod +x /usr/local/bin/ytt
            else
                echo "ytt already installed, skipping."
            fi
            ;;
        "nvm")
            if [ ! -d "${HOME}/.nvm" ]; then
                echo "Installing nvm..."
                LATEST_NVM=$(curl -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r '.name')
                (unset ZSH_VERSION && curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/${LATEST_NVM}/install.sh" | bash)
            else
                echo "nvm already installed, skipping."
            fi
            ;;
        *)
            echo "No specific installation method for $package, skipping."
            ;;
    esac
done
{{- end }} 
